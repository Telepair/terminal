// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// TenantsColumns holds the columns for the "tenants" table.
	TenantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Comment: "Primary key ID, auto-generated UUID"},
		{Name: "enabled", Type: field.TypeBool, Comment: "Whether the record is enabled, true means enabled, false means disabled", Default: true},
		{Name: "created_at", Type: field.TypeTime, Comment: "Creation time, automatically set"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "Update time, automatically updated"},
		{Name: "name", Type: field.TypeString, Unique: true, Comment: "Unique identifier name for the tenant"},
		{Name: "given_name", Type: field.TypeString, Nullable: true, Size: 100, Comment: "Display name of the tenant"},
		{Name: "avatar", Type: field.TypeBytes, Nullable: true, Comment: "Tenant avatar, stored in binary format"},
		{Name: "public_key", Type: field.TypeString, Nullable: true, Size: 2147483647, Comment: "Tenant public key for security verification"},
		{Name: "allow_registration", Type: field.TypeBool, Comment: "Whether new user registration is allowed", Default: true},
		{Name: "allowed_email_domains", Type: field.TypeJSON, Nullable: true, Comment: "List of allowed email domains for user registration (e.g. ['company.com', 'org.edu'])"},
		{Name: "admin_email", Type: field.TypeString, Size: 255, Comment: "Admin email address for tenant management"},
		{Name: "custattr", Type: field.TypeJSON, Nullable: true, Comment: "Custom attributes stored in JSON format"},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647, Comment: "Tenant description"},
	}
	// TenantsTable holds the schema information for the "tenants" table.
	TenantsTable = &schema.Table{
		Name:       "tenants",
		Comment:    "Tenant table, stores information for all tenants in the system",
		Columns:    TenantsColumns,
		PrimaryKey: []*schema.Column{TenantsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "tenant_name",
				Unique:  true,
				Columns: []*schema.Column{TenantsColumns[4]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Comment: "Primary key ID, auto-generated UUID"},
		{Name: "enabled", Type: field.TypeBool, Comment: "Whether the record is enabled, true means enabled, false means disabled", Default: true},
		{Name: "created_at", Type: field.TypeTime, Comment: "Creation time, automatically set"},
		{Name: "updated_at", Type: field.TypeTime, Comment: "Update time, automatically updated"},
		{Name: "username", Type: field.TypeString, Size: 100, Comment: "Username for login"},
		{Name: "given_name", Type: field.TypeString, Nullable: true, Size: 100, Comment: "Display name of the user"},
		{Name: "avatar", Type: field.TypeBytes, Nullable: true, Comment: "User avatar, stored in binary format"},
		{Name: "email", Type: field.TypeString, Size: 255, Comment: "User email address"},
		{Name: "email_verified", Type: field.TypeBool, Comment: "Whether the email has been verified", Default: false},
		{Name: "password_bcrypt", Type: field.TypeString, Size: 255, Comment: "Encrypted password in bcrypt format"},
		{Name: "totp_secret", Type: field.TypeString, Nullable: true, Size: 255, Comment: "Two-factor authentication secret key"},
		{Name: "totp_enabled", Type: field.TypeBool, Comment: "Whether two-factor authentication is enabled", Default: false},
		{Name: "last_login_at", Type: field.TypeTime, Nullable: true, Comment: "Last login time"},
		{Name: "last_logout_at", Type: field.TypeTime, Nullable: true, Comment: "Last logout time"},
		{Name: "last_login_ip", Type: field.TypeString, Nullable: true, Size: 45, Comment: "Last login IP address"},
		{Name: "is_superuser", Type: field.TypeBool, Comment: "Whether the user is a superadmin", Default: false},
		{Name: "is_locked", Type: field.TypeBool, Comment: "Whether the user is locked", Default: false},
		{Name: "lock_reason", Type: field.TypeString, Nullable: true, Size: 255, Comment: "Reason for user account being locked"},
		{Name: "custattr", Type: field.TypeJSON, Nullable: true, Comment: "Custom attributes stored in JSON format"},
		{Name: "tenant_id", Type: field.TypeUUID, Comment: "Associated tenant ID"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Comment:    "User table, stores information for all users in the system",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_tenants_users",
				Columns:    []*schema.Column{UsersColumns[19]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_tenant_id_username",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[19], UsersColumns[4]},
			},
			{
				Name:    "user_tenant_id_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[19], UsersColumns[7]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		TenantsTable,
		UsersTable,
	}
)

func init() {
	UsersTable.ForeignKeys[0].RefTable = TenantsTable
}
