// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/telepair/terminal/ent/tenant"
	"github.com/telepair/terminal/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetEnabled sets the "enabled" field.
func (uc *UserCreate) SetEnabled(b bool) *UserCreate {
	uc.mutation.SetEnabled(b)
	return uc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (uc *UserCreate) SetNillableEnabled(b *bool) *UserCreate {
	if b != nil {
		uc.SetEnabled(*b)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetTenantID sets the "tenant_id" field.
func (uc *UserCreate) SetTenantID(u uuid.UUID) *UserCreate {
	uc.mutation.SetTenantID(u)
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetGivenName sets the "given_name" field.
func (uc *UserCreate) SetGivenName(s string) *UserCreate {
	uc.mutation.SetGivenName(s)
	return uc
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableGivenName(s *string) *UserCreate {
	if s != nil {
		uc.SetGivenName(*s)
	}
	return uc
}

// SetAvatar sets the "avatar" field.
func (uc *UserCreate) SetAvatar(b []byte) *UserCreate {
	uc.mutation.SetAvatar(b)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetEmailVerified sets the "email_verified" field.
func (uc *UserCreate) SetEmailVerified(b bool) *UserCreate {
	uc.mutation.SetEmailVerified(b)
	return uc
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmailVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetEmailVerified(*b)
	}
	return uc
}

// SetPasswordBcrypt sets the "password_bcrypt" field.
func (uc *UserCreate) SetPasswordBcrypt(s string) *UserCreate {
	uc.mutation.SetPasswordBcrypt(s)
	return uc
}

// SetTotpSecret sets the "totp_secret" field.
func (uc *UserCreate) SetTotpSecret(s string) *UserCreate {
	uc.mutation.SetTotpSecret(s)
	return uc
}

// SetNillableTotpSecret sets the "totp_secret" field if the given value is not nil.
func (uc *UserCreate) SetNillableTotpSecret(s *string) *UserCreate {
	if s != nil {
		uc.SetTotpSecret(*s)
	}
	return uc
}

// SetTotpEnabled sets the "totp_enabled" field.
func (uc *UserCreate) SetTotpEnabled(b bool) *UserCreate {
	uc.mutation.SetTotpEnabled(b)
	return uc
}

// SetNillableTotpEnabled sets the "totp_enabled" field if the given value is not nil.
func (uc *UserCreate) SetNillableTotpEnabled(b *bool) *UserCreate {
	if b != nil {
		uc.SetTotpEnabled(*b)
	}
	return uc
}

// SetLastLoginAt sets the "last_login_at" field.
func (uc *UserCreate) SetLastLoginAt(t time.Time) *UserCreate {
	uc.mutation.SetLastLoginAt(t)
	return uc
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLoginAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastLoginAt(*t)
	}
	return uc
}

// SetLastLogoutAt sets the "last_logout_at" field.
func (uc *UserCreate) SetLastLogoutAt(t time.Time) *UserCreate {
	uc.mutation.SetLastLogoutAt(t)
	return uc
}

// SetNillableLastLogoutAt sets the "last_logout_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLogoutAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastLogoutAt(*t)
	}
	return uc
}

// SetLastLoginIP sets the "last_login_ip" field.
func (uc *UserCreate) SetLastLoginIP(s string) *UserCreate {
	uc.mutation.SetLastLoginIP(s)
	return uc
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastLoginIP(s *string) *UserCreate {
	if s != nil {
		uc.SetLastLoginIP(*s)
	}
	return uc
}

// SetIsSuperuser sets the "is_superuser" field.
func (uc *UserCreate) SetIsSuperuser(b bool) *UserCreate {
	uc.mutation.SetIsSuperuser(b)
	return uc
}

// SetNillableIsSuperuser sets the "is_superuser" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsSuperuser(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsSuperuser(*b)
	}
	return uc
}

// SetIsLocked sets the "is_locked" field.
func (uc *UserCreate) SetIsLocked(b bool) *UserCreate {
	uc.mutation.SetIsLocked(b)
	return uc
}

// SetNillableIsLocked sets the "is_locked" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsLocked(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsLocked(*b)
	}
	return uc
}

// SetLockReason sets the "lock_reason" field.
func (uc *UserCreate) SetLockReason(s string) *UserCreate {
	uc.mutation.SetLockReason(s)
	return uc
}

// SetNillableLockReason sets the "lock_reason" field if the given value is not nil.
func (uc *UserCreate) SetNillableLockReason(s *string) *UserCreate {
	if s != nil {
		uc.SetLockReason(*s)
	}
	return uc
}

// SetCustattr sets the "custattr" field.
func (uc *UserCreate) SetCustattr(m map[string]interface{}) *UserCreate {
	uc.mutation.SetCustattr(m)
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uuid.UUID) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uc *UserCreate) SetTenant(t *Tenant) *UserCreate {
	return uc.SetTenantID(t.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.Enabled(); !ok {
		v := user.DefaultEnabled
		uc.mutation.SetEnabled(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.EmailVerified(); !ok {
		v := user.DefaultEmailVerified
		uc.mutation.SetEmailVerified(v)
	}
	if _, ok := uc.mutation.TotpEnabled(); !ok {
		v := user.DefaultTotpEnabled
		uc.mutation.SetTotpEnabled(v)
	}
	if _, ok := uc.mutation.IsSuperuser(); !ok {
		v := user.DefaultIsSuperuser
		uc.mutation.SetIsSuperuser(v)
	}
	if _, ok := uc.mutation.IsLocked(); !ok {
		v := user.DefaultIsLocked
		uc.mutation.SetIsLocked(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "User.enabled"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "User.tenant_id"`)}
	}
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if v, ok := uc.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uc.mutation.GivenName(); ok {
		if err := user.GivenNameValidator(v); err != nil {
			return &ValidationError{Name: "given_name", err: fmt.Errorf(`ent: validator failed for field "User.given_name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.EmailVerified(); !ok {
		return &ValidationError{Name: "email_verified", err: errors.New(`ent: missing required field "User.email_verified"`)}
	}
	if _, ok := uc.mutation.PasswordBcrypt(); !ok {
		return &ValidationError{Name: "password_bcrypt", err: errors.New(`ent: missing required field "User.password_bcrypt"`)}
	}
	if v, ok := uc.mutation.PasswordBcrypt(); ok {
		if err := user.PasswordBcryptValidator(v); err != nil {
			return &ValidationError{Name: "password_bcrypt", err: fmt.Errorf(`ent: validator failed for field "User.password_bcrypt": %w`, err)}
		}
	}
	if v, ok := uc.mutation.TotpSecret(); ok {
		if err := user.TotpSecretValidator(v); err != nil {
			return &ValidationError{Name: "totp_secret", err: fmt.Errorf(`ent: validator failed for field "User.totp_secret": %w`, err)}
		}
	}
	if _, ok := uc.mutation.TotpEnabled(); !ok {
		return &ValidationError{Name: "totp_enabled", err: errors.New(`ent: missing required field "User.totp_enabled"`)}
	}
	if v, ok := uc.mutation.LastLoginIP(); ok {
		if err := user.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`ent: validator failed for field "User.last_login_ip": %w`, err)}
		}
	}
	if _, ok := uc.mutation.IsSuperuser(); !ok {
		return &ValidationError{Name: "is_superuser", err: errors.New(`ent: missing required field "User.is_superuser"`)}
	}
	if _, ok := uc.mutation.IsLocked(); !ok {
		return &ValidationError{Name: "is_locked", err: errors.New(`ent: missing required field "User.is_locked"`)}
	}
	if v, ok := uc.mutation.LockReason(); ok {
		if err := user.LockReasonValidator(v); err != nil {
			return &ValidationError{Name: "lock_reason", err: fmt.Errorf(`ent: validator failed for field "User.lock_reason": %w`, err)}
		}
	}
	if len(uc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "User.tenant"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.Enabled(); ok {
		_spec.SetField(user.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uc.mutation.GivenName(); ok {
		_spec.SetField(user.FieldGivenName, field.TypeString, value)
		_node.GivenName = &value
	}
	if value, ok := uc.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeBytes, value)
		_node.Avatar = &value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
		_node.EmailVerified = value
	}
	if value, ok := uc.mutation.PasswordBcrypt(); ok {
		_spec.SetField(user.FieldPasswordBcrypt, field.TypeString, value)
		_node.PasswordBcrypt = value
	}
	if value, ok := uc.mutation.TotpSecret(); ok {
		_spec.SetField(user.FieldTotpSecret, field.TypeString, value)
		_node.TotpSecret = &value
	}
	if value, ok := uc.mutation.TotpEnabled(); ok {
		_spec.SetField(user.FieldTotpEnabled, field.TypeBool, value)
		_node.TotpEnabled = value
	}
	if value, ok := uc.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
		_node.LastLoginAt = &value
	}
	if value, ok := uc.mutation.LastLogoutAt(); ok {
		_spec.SetField(user.FieldLastLogoutAt, field.TypeTime, value)
		_node.LastLogoutAt = &value
	}
	if value, ok := uc.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
		_node.LastLoginIP = &value
	}
	if value, ok := uc.mutation.IsSuperuser(); ok {
		_spec.SetField(user.FieldIsSuperuser, field.TypeBool, value)
		_node.IsSuperuser = value
	}
	if value, ok := uc.mutation.IsLocked(); ok {
		_spec.SetField(user.FieldIsLocked, field.TypeBool, value)
		_node.IsLocked = value
	}
	if value, ok := uc.mutation.LockReason(); ok {
		_spec.SetField(user.FieldLockReason, field.TypeString, value)
		_node.LockReason = &value
	}
	if value, ok := uc.mutation.Custattr(); ok {
		_spec.SetField(user.FieldCustattr, field.TypeJSON, value)
		_node.Custattr = value
	}
	if nodes := uc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
