// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/telepair/terminal/ent/schema"
	"github.com/telepair/terminal/ent/tenant"
	"github.com/telepair/terminal/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	tenantMixin := schema.Tenant{}.Mixin()
	tenantMixinFields0 := tenantMixin[0].Fields()
	_ = tenantMixinFields0
	tenantFields := schema.Tenant{}.Fields()
	_ = tenantFields
	// tenantDescEnabled is the schema descriptor for enabled field.
	tenantDescEnabled := tenantMixinFields0[1].Descriptor()
	// tenant.DefaultEnabled holds the default value on creation for the enabled field.
	tenant.DefaultEnabled = tenantDescEnabled.Default.(bool)
	// tenantDescCreatedAt is the schema descriptor for created_at field.
	tenantDescCreatedAt := tenantMixinFields0[2].Descriptor()
	// tenant.DefaultCreatedAt holds the default value on creation for the created_at field.
	tenant.DefaultCreatedAt = tenantDescCreatedAt.Default.(func() time.Time)
	// tenantDescUpdatedAt is the schema descriptor for updated_at field.
	tenantDescUpdatedAt := tenantMixinFields0[3].Descriptor()
	// tenant.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	tenant.DefaultUpdatedAt = tenantDescUpdatedAt.Default.(func() time.Time)
	// tenant.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	tenant.UpdateDefaultUpdatedAt = tenantDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tenantDescName is the schema descriptor for name field.
	tenantDescName := tenantFields[0].Descriptor()
	// tenant.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tenant.NameValidator = tenantDescName.Validators[0].(func(string) error)
	// tenantDescGivenName is the schema descriptor for given_name field.
	tenantDescGivenName := tenantFields[1].Descriptor()
	// tenant.GivenNameValidator is a validator for the "given_name" field. It is called by the builders before save.
	tenant.GivenNameValidator = tenantDescGivenName.Validators[0].(func(string) error)
	// tenantDescAllowRegistration is the schema descriptor for allow_registration field.
	tenantDescAllowRegistration := tenantFields[4].Descriptor()
	// tenant.DefaultAllowRegistration holds the default value on creation for the allow_registration field.
	tenant.DefaultAllowRegistration = tenantDescAllowRegistration.Default.(bool)
	// tenantDescAdminEmail is the schema descriptor for admin_email field.
	tenantDescAdminEmail := tenantFields[6].Descriptor()
	// tenant.AdminEmailValidator is a validator for the "admin_email" field. It is called by the builders before save.
	tenant.AdminEmailValidator = func() func(string) error {
		validators := tenantDescAdminEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(admin_email string) error {
			for _, fn := range fns {
				if err := fn(admin_email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenantDescID is the schema descriptor for id field.
	tenantDescID := tenantMixinFields0[0].Descriptor()
	// tenant.DefaultID holds the default value on creation for the id field.
	tenant.DefaultID = tenantDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEnabled is the schema descriptor for enabled field.
	userDescEnabled := userMixinFields0[1].Descriptor()
	// user.DefaultEnabled holds the default value on creation for the enabled field.
	user.DefaultEnabled = userDescEnabled.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[3].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescGivenName is the schema descriptor for given_name field.
	userDescGivenName := userFields[2].Descriptor()
	// user.GivenNameValidator is a validator for the "given_name" field. It is called by the builders before save.
	user.GivenNameValidator = userDescGivenName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[4].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmailVerified is the schema descriptor for email_verified field.
	userDescEmailVerified := userFields[5].Descriptor()
	// user.DefaultEmailVerified holds the default value on creation for the email_verified field.
	user.DefaultEmailVerified = userDescEmailVerified.Default.(bool)
	// userDescPasswordBcrypt is the schema descriptor for password_bcrypt field.
	userDescPasswordBcrypt := userFields[6].Descriptor()
	// user.PasswordBcryptValidator is a validator for the "password_bcrypt" field. It is called by the builders before save.
	user.PasswordBcryptValidator = func() func(string) error {
		validators := userDescPasswordBcrypt.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password_bcrypt string) error {
			for _, fn := range fns {
				if err := fn(password_bcrypt); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescTotpSecret is the schema descriptor for totp_secret field.
	userDescTotpSecret := userFields[7].Descriptor()
	// user.TotpSecretValidator is a validator for the "totp_secret" field. It is called by the builders before save.
	user.TotpSecretValidator = userDescTotpSecret.Validators[0].(func(string) error)
	// userDescTotpEnabled is the schema descriptor for totp_enabled field.
	userDescTotpEnabled := userFields[8].Descriptor()
	// user.DefaultTotpEnabled holds the default value on creation for the totp_enabled field.
	user.DefaultTotpEnabled = userDescTotpEnabled.Default.(bool)
	// userDescLastLoginIP is the schema descriptor for last_login_ip field.
	userDescLastLoginIP := userFields[11].Descriptor()
	// user.LastLoginIPValidator is a validator for the "last_login_ip" field. It is called by the builders before save.
	user.LastLoginIPValidator = userDescLastLoginIP.Validators[0].(func(string) error)
	// userDescIsSuperuser is the schema descriptor for is_superuser field.
	userDescIsSuperuser := userFields[12].Descriptor()
	// user.DefaultIsSuperuser holds the default value on creation for the is_superuser field.
	user.DefaultIsSuperuser = userDescIsSuperuser.Default.(bool)
	// userDescIsLocked is the schema descriptor for is_locked field.
	userDescIsLocked := userFields[13].Descriptor()
	// user.DefaultIsLocked holds the default value on creation for the is_locked field.
	user.DefaultIsLocked = userDescIsLocked.Default.(bool)
	// userDescLockReason is the schema descriptor for lock_reason field.
	userDescLockReason := userFields[14].Descriptor()
	// user.LockReasonValidator is a validator for the "lock_reason" field. It is called by the builders before save.
	user.LockReasonValidator = userDescLockReason.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
