// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/telepair/terminal/ent/tenant"
	"github.com/telepair/terminal/ent/user"
)

// User table, stores information for all users in the system
type User struct {
	config `json:"-"`
	// ID of the ent.
	// Primary key ID, auto-generated UUID
	ID uuid.UUID `json:"id,omitempty"`
	// Whether the record is enabled, true means enabled, false means disabled
	Enabled bool `json:"enabled,omitempty"`
	// Creation time, automatically set
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update time, automatically updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Associated tenant ID
	TenantID uuid.UUID `json:"tenant_id,omitempty"`
	// Username for login
	Username string `json:"username,omitempty"`
	// Display name of the user
	GivenName *string `json:"given_name,omitempty"`
	// User avatar, stored in binary format
	Avatar *[]byte `json:"avatar,omitempty"`
	// User email address
	Email string `json:"email,omitempty"`
	// Whether the email has been verified
	EmailVerified bool `json:"email_verified,omitempty"`
	// Encrypted password in bcrypt format
	PasswordBcrypt string `json:"password_bcrypt,omitempty"`
	// Two-factor authentication secret key
	TotpSecret *string `json:"totp_secret,omitempty"`
	// Whether two-factor authentication is enabled
	TotpEnabled bool `json:"totp_enabled,omitempty"`
	// Last login time
	LastLoginAt *time.Time `json:"last_login_at,omitempty"`
	// Last logout time
	LastLogoutAt *time.Time `json:"last_logout_at,omitempty"`
	// Last login IP address
	LastLoginIP *string `json:"last_login_ip,omitempty"`
	// Whether the user is a superadmin
	IsSuperuser bool `json:"is_superuser,omitempty"`
	// Whether the user is locked
	IsLocked bool `json:"is_locked,omitempty"`
	// Reason for user account being locked
	LockReason *string `json:"lock_reason,omitempty"`
	// Custom attributes stored in JSON format
	Custattr map[string]interface{} `json:"custattr,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Tenant this user belongs to
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldAvatar, user.FieldCustattr:
			values[i] = new([]byte)
		case user.FieldEnabled, user.FieldEmailVerified, user.FieldTotpEnabled, user.FieldIsSuperuser, user.FieldIsLocked:
			values[i] = new(sql.NullBool)
		case user.FieldUsername, user.FieldGivenName, user.FieldEmail, user.FieldPasswordBcrypt, user.FieldTotpSecret, user.FieldLastLoginIP, user.FieldLockReason:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldLastLoginAt, user.FieldLastLogoutAt:
			values[i] = new(sql.NullTime)
		case user.FieldID, user.FieldTenantID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				u.Enabled = value.Bool
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldTenantID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				u.TenantID = *value
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldGivenName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field given_name", values[i])
			} else if value.Valid {
				u.GivenName = new(string)
				*u.GivenName = value.String
			}
		case user.FieldAvatar:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value != nil {
				u.Avatar = value
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field email_verified", values[i])
			} else if value.Valid {
				u.EmailVerified = value.Bool
			}
		case user.FieldPasswordBcrypt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_bcrypt", values[i])
			} else if value.Valid {
				u.PasswordBcrypt = value.String
			}
		case user.FieldTotpSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field totp_secret", values[i])
			} else if value.Valid {
				u.TotpSecret = new(string)
				*u.TotpSecret = value.String
			}
		case user.FieldTotpEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field totp_enabled", values[i])
			} else if value.Valid {
				u.TotpEnabled = value.Bool
			}
		case user.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				u.LastLoginAt = new(time.Time)
				*u.LastLoginAt = value.Time
			}
		case user.FieldLastLogoutAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_logout_at", values[i])
			} else if value.Valid {
				u.LastLogoutAt = new(time.Time)
				*u.LastLogoutAt = value.Time
			}
		case user.FieldLastLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_ip", values[i])
			} else if value.Valid {
				u.LastLoginIP = new(string)
				*u.LastLoginIP = value.String
			}
		case user.FieldIsSuperuser:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_superuser", values[i])
			} else if value.Valid {
				u.IsSuperuser = value.Bool
			}
		case user.FieldIsLocked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_locked", values[i])
			} else if value.Valid {
				u.IsLocked = value.Bool
			}
		case user.FieldLockReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lock_reason", values[i])
			} else if value.Valid {
				u.LockReason = new(string)
				*u.LockReason = value.String
			}
		case user.FieldCustattr:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field custattr", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.Custattr); err != nil {
					return fmt.Errorf("unmarshal field custattr: %w", err)
				}
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the User entity.
func (u *User) QueryTenant() *TenantQuery {
	return NewUserClient(u.config).QueryTenant(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", u.Enabled))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", u.TenantID))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	if v := u.GivenName; v != nil {
		builder.WriteString("given_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.Avatar; v != nil {
		builder.WriteString("avatar=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("email_verified=")
	builder.WriteString(fmt.Sprintf("%v", u.EmailVerified))
	builder.WriteString(", ")
	builder.WriteString("password_bcrypt=")
	builder.WriteString(u.PasswordBcrypt)
	builder.WriteString(", ")
	if v := u.TotpSecret; v != nil {
		builder.WriteString("totp_secret=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("totp_enabled=")
	builder.WriteString(fmt.Sprintf("%v", u.TotpEnabled))
	builder.WriteString(", ")
	if v := u.LastLoginAt; v != nil {
		builder.WriteString("last_login_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.LastLogoutAt; v != nil {
		builder.WriteString("last_logout_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.LastLoginIP; v != nil {
		builder.WriteString("last_login_ip=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_superuser=")
	builder.WriteString(fmt.Sprintf("%v", u.IsSuperuser))
	builder.WriteString(", ")
	builder.WriteString("is_locked=")
	builder.WriteString(fmt.Sprintf("%v", u.IsLocked))
	builder.WriteString(", ")
	if v := u.LockReason; v != nil {
		builder.WriteString("lock_reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("custattr=")
	builder.WriteString(fmt.Sprintf("%v", u.Custattr))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
