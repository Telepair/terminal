// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/telepair/terminal/ent/tenant"
)

// Tenant table, stores information for all tenants in the system
type Tenant struct {
	config `json:"-"`
	// ID of the ent.
	// Primary key ID, auto-generated UUID
	ID uuid.UUID `json:"id,omitempty"`
	// Whether the record is enabled, true means enabled, false means disabled
	Enabled bool `json:"enabled,omitempty"`
	// Creation time, automatically set
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update time, automatically updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Unique identifier name for the tenant
	Name string `json:"name,omitempty"`
	// Display name of the tenant
	GivenName *string `json:"given_name,omitempty"`
	// Tenant avatar, stored in binary format
	Avatar []byte `json:"avatar,omitempty"`
	// Tenant public key for security verification
	PublicKey string `json:"public_key,omitempty"`
	// Whether new user registration is allowed
	AllowRegistration bool `json:"allow_registration,omitempty"`
	// List of allowed email domains for user registration (e.g. ['company.com', 'org.edu'])
	AllowedEmailDomains []string `json:"allowed_email_domains,omitempty"`
	// Admin email address for tenant management
	AdminEmail string `json:"admin_email,omitempty"`
	// Custom attributes stored in JSON format
	Custattr map[string]interface{} `json:"custattr,omitempty"`
	// Tenant description
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenantQuery when eager-loading is set.
	Edges        TenantEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TenantEdges holds the relations/edges for other nodes in the graph.
type TenantEdges struct {
	// List of users associated with this tenant
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tenant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenant.FieldAvatar, tenant.FieldAllowedEmailDomains, tenant.FieldCustattr:
			values[i] = new([]byte)
		case tenant.FieldEnabled, tenant.FieldAllowRegistration:
			values[i] = new(sql.NullBool)
		case tenant.FieldName, tenant.FieldGivenName, tenant.FieldPublicKey, tenant.FieldAdminEmail, tenant.FieldDescription:
			values[i] = new(sql.NullString)
		case tenant.FieldCreatedAt, tenant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case tenant.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tenant fields.
func (t *Tenant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenant.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case tenant.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				t.Enabled = value.Bool
			}
		case tenant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tenant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case tenant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case tenant.FieldGivenName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field given_name", values[i])
			} else if value.Valid {
				t.GivenName = new(string)
				*t.GivenName = value.String
			}
		case tenant.FieldAvatar:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value != nil {
				t.Avatar = *value
			}
		case tenant.FieldPublicKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_key", values[i])
			} else if value.Valid {
				t.PublicKey = value.String
			}
		case tenant.FieldAllowRegistration:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_registration", values[i])
			} else if value.Valid {
				t.AllowRegistration = value.Bool
			}
		case tenant.FieldAllowedEmailDomains:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allowed_email_domains", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.AllowedEmailDomains); err != nil {
					return fmt.Errorf("unmarshal field allowed_email_domains: %w", err)
				}
			}
		case tenant.FieldAdminEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field admin_email", values[i])
			} else if value.Valid {
				t.AdminEmail = value.String
			}
		case tenant.FieldCustattr:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field custattr", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Custattr); err != nil {
					return fmt.Errorf("unmarshal field custattr: %w", err)
				}
			}
		case tenant.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tenant.
// This includes values selected through modifiers, order, etc.
func (t *Tenant) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Tenant entity.
func (t *Tenant) QueryUsers() *UserQuery {
	return NewTenantClient(t.config).QueryUsers(t)
}

// Update returns a builder for updating this Tenant.
// Note that you need to call Tenant.Unwrap() before calling this method if this Tenant
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tenant) Update() *TenantUpdateOne {
	return NewTenantClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tenant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tenant) Unwrap() *Tenant {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tenant is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tenant) String() string {
	var builder strings.Builder
	builder.WriteString("Tenant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", t.Enabled))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	if v := t.GivenName; v != nil {
		builder.WriteString("given_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(fmt.Sprintf("%v", t.Avatar))
	builder.WriteString(", ")
	builder.WriteString("public_key=")
	builder.WriteString(t.PublicKey)
	builder.WriteString(", ")
	builder.WriteString("allow_registration=")
	builder.WriteString(fmt.Sprintf("%v", t.AllowRegistration))
	builder.WriteString(", ")
	builder.WriteString("allowed_email_domains=")
	builder.WriteString(fmt.Sprintf("%v", t.AllowedEmailDomains))
	builder.WriteString(", ")
	builder.WriteString("admin_email=")
	builder.WriteString(t.AdminEmail)
	builder.WriteString(", ")
	builder.WriteString("custattr=")
	builder.WriteString(fmt.Sprintf("%v", t.Custattr))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Tenants is a parsable slice of Tenant.
type Tenants []*Tenant
