// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/telepair/terminal/ent/predicate"
	"github.com/telepair/terminal/ent/tenant"
	"github.com/telepair/terminal/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetEnabled sets the "enabled" field.
func (uu *UserUpdate) SetEnabled(b bool) *UserUpdate {
	uu.mutation.SetEnabled(b)
	return uu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEnabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEnabled(*b)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetTenantID sets the "tenant_id" field.
func (uu *UserUpdate) SetTenantID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetTenantID(u)
	return uu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenantID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetTenantID(*u)
	}
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetGivenName sets the "given_name" field.
func (uu *UserUpdate) SetGivenName(s string) *UserUpdate {
	uu.mutation.SetGivenName(s)
	return uu
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGivenName(s *string) *UserUpdate {
	if s != nil {
		uu.SetGivenName(*s)
	}
	return uu
}

// ClearGivenName clears the value of the "given_name" field.
func (uu *UserUpdate) ClearGivenName() *UserUpdate {
	uu.mutation.ClearGivenName()
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(b []byte) *UserUpdate {
	uu.mutation.SetAvatar(b)
	return uu
}

// ClearAvatar clears the value of the "avatar" field.
func (uu *UserUpdate) ClearAvatar() *UserUpdate {
	uu.mutation.ClearAvatar()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetEmailVerified sets the "email_verified" field.
func (uu *UserUpdate) SetEmailVerified(b bool) *UserUpdate {
	uu.mutation.SetEmailVerified(b)
	return uu
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailVerified(*b)
	}
	return uu
}

// SetPasswordBcrypt sets the "password_bcrypt" field.
func (uu *UserUpdate) SetPasswordBcrypt(s string) *UserUpdate {
	uu.mutation.SetPasswordBcrypt(s)
	return uu
}

// SetNillablePasswordBcrypt sets the "password_bcrypt" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordBcrypt(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordBcrypt(*s)
	}
	return uu
}

// SetTotpSecret sets the "totp_secret" field.
func (uu *UserUpdate) SetTotpSecret(s string) *UserUpdate {
	uu.mutation.SetTotpSecret(s)
	return uu
}

// SetNillableTotpSecret sets the "totp_secret" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTotpSecret(s *string) *UserUpdate {
	if s != nil {
		uu.SetTotpSecret(*s)
	}
	return uu
}

// ClearTotpSecret clears the value of the "totp_secret" field.
func (uu *UserUpdate) ClearTotpSecret() *UserUpdate {
	uu.mutation.ClearTotpSecret()
	return uu
}

// SetTotpEnabled sets the "totp_enabled" field.
func (uu *UserUpdate) SetTotpEnabled(b bool) *UserUpdate {
	uu.mutation.SetTotpEnabled(b)
	return uu
}

// SetNillableTotpEnabled sets the "totp_enabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTotpEnabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetTotpEnabled(*b)
	}
	return uu
}

// SetLastLoginAt sets the "last_login_at" field.
func (uu *UserUpdate) SetLastLoginAt(t time.Time) *UserUpdate {
	uu.mutation.SetLastLoginAt(t)
	return uu
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLoginAt(*t)
	}
	return uu
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (uu *UserUpdate) ClearLastLoginAt() *UserUpdate {
	uu.mutation.ClearLastLoginAt()
	return uu
}

// SetLastLogoutAt sets the "last_logout_at" field.
func (uu *UserUpdate) SetLastLogoutAt(t time.Time) *UserUpdate {
	uu.mutation.SetLastLogoutAt(t)
	return uu
}

// SetNillableLastLogoutAt sets the "last_logout_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLogoutAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLogoutAt(*t)
	}
	return uu
}

// ClearLastLogoutAt clears the value of the "last_logout_at" field.
func (uu *UserUpdate) ClearLastLogoutAt() *UserUpdate {
	uu.mutation.ClearLastLogoutAt()
	return uu
}

// SetLastLoginIP sets the "last_login_ip" field.
func (uu *UserUpdate) SetLastLoginIP(s string) *UserUpdate {
	uu.mutation.SetLastLoginIP(s)
	return uu
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginIP(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastLoginIP(*s)
	}
	return uu
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (uu *UserUpdate) ClearLastLoginIP() *UserUpdate {
	uu.mutation.ClearLastLoginIP()
	return uu
}

// SetIsSuperuser sets the "is_superuser" field.
func (uu *UserUpdate) SetIsSuperuser(b bool) *UserUpdate {
	uu.mutation.SetIsSuperuser(b)
	return uu
}

// SetNillableIsSuperuser sets the "is_superuser" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsSuperuser(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsSuperuser(*b)
	}
	return uu
}

// SetIsLocked sets the "is_locked" field.
func (uu *UserUpdate) SetIsLocked(b bool) *UserUpdate {
	uu.mutation.SetIsLocked(b)
	return uu
}

// SetNillableIsLocked sets the "is_locked" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsLocked(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsLocked(*b)
	}
	return uu
}

// SetLockReason sets the "lock_reason" field.
func (uu *UserUpdate) SetLockReason(s string) *UserUpdate {
	uu.mutation.SetLockReason(s)
	return uu
}

// SetNillableLockReason sets the "lock_reason" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLockReason(s *string) *UserUpdate {
	if s != nil {
		uu.SetLockReason(*s)
	}
	return uu
}

// ClearLockReason clears the value of the "lock_reason" field.
func (uu *UserUpdate) ClearLockReason() *UserUpdate {
	uu.mutation.ClearLockReason()
	return uu
}

// SetCustattr sets the "custattr" field.
func (uu *UserUpdate) SetCustattr(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetCustattr(m)
	return uu
}

// ClearCustattr clears the value of the "custattr" field.
func (uu *UserUpdate) ClearCustattr() *UserUpdate {
	uu.mutation.ClearCustattr()
	return uu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uu *UserUpdate) SetTenant(t *Tenant) *UserUpdate {
	return uu.SetTenantID(t.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (uu *UserUpdate) ClearTenant() *UserUpdate {
	uu.mutation.ClearTenant()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.GivenName(); ok {
		if err := user.GivenNameValidator(v); err != nil {
			return &ValidationError{Name: "given_name", err: fmt.Errorf(`ent: validator failed for field "User.given_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PasswordBcrypt(); ok {
		if err := user.PasswordBcryptValidator(v); err != nil {
			return &ValidationError{Name: "password_bcrypt", err: fmt.Errorf(`ent: validator failed for field "User.password_bcrypt": %w`, err)}
		}
	}
	if v, ok := uu.mutation.TotpSecret(); ok {
		if err := user.TotpSecretValidator(v); err != nil {
			return &ValidationError{Name: "totp_secret", err: fmt.Errorf(`ent: validator failed for field "User.totp_secret": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LastLoginIP(); ok {
		if err := user.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`ent: validator failed for field "User.last_login_ip": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LockReason(); ok {
		if err := user.LockReasonValidator(v); err != nil {
			return &ValidationError{Name: "lock_reason", err: fmt.Errorf(`ent: validator failed for field "User.lock_reason": %w`, err)}
		}
	}
	if uu.mutation.TenantCleared() && len(uu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Enabled(); ok {
		_spec.SetField(user.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.GivenName(); ok {
		_spec.SetField(user.FieldGivenName, field.TypeString, value)
	}
	if uu.mutation.GivenNameCleared() {
		_spec.ClearField(user.FieldGivenName, field.TypeString)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeBytes, value)
	}
	if uu.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeBytes)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.PasswordBcrypt(); ok {
		_spec.SetField(user.FieldPasswordBcrypt, field.TypeString, value)
	}
	if value, ok := uu.mutation.TotpSecret(); ok {
		_spec.SetField(user.FieldTotpSecret, field.TypeString, value)
	}
	if uu.mutation.TotpSecretCleared() {
		_spec.ClearField(user.FieldTotpSecret, field.TypeString)
	}
	if value, ok := uu.mutation.TotpEnabled(); ok {
		_spec.SetField(user.FieldTotpEnabled, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if uu.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := uu.mutation.LastLogoutAt(); ok {
		_spec.SetField(user.FieldLastLogoutAt, field.TypeTime, value)
	}
	if uu.mutation.LastLogoutAtCleared() {
		_spec.ClearField(user.FieldLastLogoutAt, field.TypeTime)
	}
	if value, ok := uu.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if uu.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := uu.mutation.IsSuperuser(); ok {
		_spec.SetField(user.FieldIsSuperuser, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IsLocked(); ok {
		_spec.SetField(user.FieldIsLocked, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LockReason(); ok {
		_spec.SetField(user.FieldLockReason, field.TypeString, value)
	}
	if uu.mutation.LockReasonCleared() {
		_spec.ClearField(user.FieldLockReason, field.TypeString)
	}
	if value, ok := uu.mutation.Custattr(); ok {
		_spec.SetField(user.FieldCustattr, field.TypeJSON, value)
	}
	if uu.mutation.CustattrCleared() {
		_spec.ClearField(user.FieldCustattr, field.TypeJSON)
	}
	if uu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEnabled sets the "enabled" field.
func (uuo *UserUpdateOne) SetEnabled(b bool) *UserUpdateOne {
	uuo.mutation.SetEnabled(b)
	return uuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEnabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEnabled(*b)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetTenantID sets the "tenant_id" field.
func (uuo *UserUpdateOne) SetTenantID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetTenantID(u)
	return uuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenantID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetTenantID(*u)
	}
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetGivenName sets the "given_name" field.
func (uuo *UserUpdateOne) SetGivenName(s string) *UserUpdateOne {
	uuo.mutation.SetGivenName(s)
	return uuo
}

// SetNillableGivenName sets the "given_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGivenName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGivenName(*s)
	}
	return uuo
}

// ClearGivenName clears the value of the "given_name" field.
func (uuo *UserUpdateOne) ClearGivenName() *UserUpdateOne {
	uuo.mutation.ClearGivenName()
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(b []byte) *UserUpdateOne {
	uuo.mutation.SetAvatar(b)
	return uuo
}

// ClearAvatar clears the value of the "avatar" field.
func (uuo *UserUpdateOne) ClearAvatar() *UserUpdateOne {
	uuo.mutation.ClearAvatar()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetEmailVerified sets the "email_verified" field.
func (uuo *UserUpdateOne) SetEmailVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailVerified(b)
	return uuo
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailVerified(*b)
	}
	return uuo
}

// SetPasswordBcrypt sets the "password_bcrypt" field.
func (uuo *UserUpdateOne) SetPasswordBcrypt(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordBcrypt(s)
	return uuo
}

// SetNillablePasswordBcrypt sets the "password_bcrypt" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordBcrypt(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordBcrypt(*s)
	}
	return uuo
}

// SetTotpSecret sets the "totp_secret" field.
func (uuo *UserUpdateOne) SetTotpSecret(s string) *UserUpdateOne {
	uuo.mutation.SetTotpSecret(s)
	return uuo
}

// SetNillableTotpSecret sets the "totp_secret" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTotpSecret(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTotpSecret(*s)
	}
	return uuo
}

// ClearTotpSecret clears the value of the "totp_secret" field.
func (uuo *UserUpdateOne) ClearTotpSecret() *UserUpdateOne {
	uuo.mutation.ClearTotpSecret()
	return uuo
}

// SetTotpEnabled sets the "totp_enabled" field.
func (uuo *UserUpdateOne) SetTotpEnabled(b bool) *UserUpdateOne {
	uuo.mutation.SetTotpEnabled(b)
	return uuo
}

// SetNillableTotpEnabled sets the "totp_enabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTotpEnabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetTotpEnabled(*b)
	}
	return uuo
}

// SetLastLoginAt sets the "last_login_at" field.
func (uuo *UserUpdateOne) SetLastLoginAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLoginAt(t)
	return uuo
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLoginAt(*t)
	}
	return uuo
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (uuo *UserUpdateOne) ClearLastLoginAt() *UserUpdateOne {
	uuo.mutation.ClearLastLoginAt()
	return uuo
}

// SetLastLogoutAt sets the "last_logout_at" field.
func (uuo *UserUpdateOne) SetLastLogoutAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLogoutAt(t)
	return uuo
}

// SetNillableLastLogoutAt sets the "last_logout_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLogoutAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLogoutAt(*t)
	}
	return uuo
}

// ClearLastLogoutAt clears the value of the "last_logout_at" field.
func (uuo *UserUpdateOne) ClearLastLogoutAt() *UserUpdateOne {
	uuo.mutation.ClearLastLogoutAt()
	return uuo
}

// SetLastLoginIP sets the "last_login_ip" field.
func (uuo *UserUpdateOne) SetLastLoginIP(s string) *UserUpdateOne {
	uuo.mutation.SetLastLoginIP(s)
	return uuo
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginIP(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastLoginIP(*s)
	}
	return uuo
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (uuo *UserUpdateOne) ClearLastLoginIP() *UserUpdateOne {
	uuo.mutation.ClearLastLoginIP()
	return uuo
}

// SetIsSuperuser sets the "is_superuser" field.
func (uuo *UserUpdateOne) SetIsSuperuser(b bool) *UserUpdateOne {
	uuo.mutation.SetIsSuperuser(b)
	return uuo
}

// SetNillableIsSuperuser sets the "is_superuser" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsSuperuser(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsSuperuser(*b)
	}
	return uuo
}

// SetIsLocked sets the "is_locked" field.
func (uuo *UserUpdateOne) SetIsLocked(b bool) *UserUpdateOne {
	uuo.mutation.SetIsLocked(b)
	return uuo
}

// SetNillableIsLocked sets the "is_locked" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsLocked(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsLocked(*b)
	}
	return uuo
}

// SetLockReason sets the "lock_reason" field.
func (uuo *UserUpdateOne) SetLockReason(s string) *UserUpdateOne {
	uuo.mutation.SetLockReason(s)
	return uuo
}

// SetNillableLockReason sets the "lock_reason" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLockReason(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLockReason(*s)
	}
	return uuo
}

// ClearLockReason clears the value of the "lock_reason" field.
func (uuo *UserUpdateOne) ClearLockReason() *UserUpdateOne {
	uuo.mutation.ClearLockReason()
	return uuo
}

// SetCustattr sets the "custattr" field.
func (uuo *UserUpdateOne) SetCustattr(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetCustattr(m)
	return uuo
}

// ClearCustattr clears the value of the "custattr" field.
func (uuo *UserUpdateOne) ClearCustattr() *UserUpdateOne {
	uuo.mutation.ClearCustattr()
	return uuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uuo *UserUpdateOne) SetTenant(t *Tenant) *UserUpdateOne {
	return uuo.SetTenantID(t.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (uuo *UserUpdateOne) ClearTenant() *UserUpdateOne {
	uuo.mutation.ClearTenant()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.GivenName(); ok {
		if err := user.GivenNameValidator(v); err != nil {
			return &ValidationError{Name: "given_name", err: fmt.Errorf(`ent: validator failed for field "User.given_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PasswordBcrypt(); ok {
		if err := user.PasswordBcryptValidator(v); err != nil {
			return &ValidationError{Name: "password_bcrypt", err: fmt.Errorf(`ent: validator failed for field "User.password_bcrypt": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.TotpSecret(); ok {
		if err := user.TotpSecretValidator(v); err != nil {
			return &ValidationError{Name: "totp_secret", err: fmt.Errorf(`ent: validator failed for field "User.totp_secret": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LastLoginIP(); ok {
		if err := user.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`ent: validator failed for field "User.last_login_ip": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LockReason(); ok {
		if err := user.LockReasonValidator(v); err != nil {
			return &ValidationError{Name: "lock_reason", err: fmt.Errorf(`ent: validator failed for field "User.lock_reason": %w`, err)}
		}
	}
	if uuo.mutation.TenantCleared() && len(uuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Enabled(); ok {
		_spec.SetField(user.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.GivenName(); ok {
		_spec.SetField(user.FieldGivenName, field.TypeString, value)
	}
	if uuo.mutation.GivenNameCleared() {
		_spec.ClearField(user.FieldGivenName, field.TypeString)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeBytes, value)
	}
	if uuo.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeBytes)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.PasswordBcrypt(); ok {
		_spec.SetField(user.FieldPasswordBcrypt, field.TypeString, value)
	}
	if value, ok := uuo.mutation.TotpSecret(); ok {
		_spec.SetField(user.FieldTotpSecret, field.TypeString, value)
	}
	if uuo.mutation.TotpSecretCleared() {
		_spec.ClearField(user.FieldTotpSecret, field.TypeString)
	}
	if value, ok := uuo.mutation.TotpEnabled(); ok {
		_spec.SetField(user.FieldTotpEnabled, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if uuo.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastLogoutAt(); ok {
		_spec.SetField(user.FieldLastLogoutAt, field.TypeTime, value)
	}
	if uuo.mutation.LastLogoutAtCleared() {
		_spec.ClearField(user.FieldLastLogoutAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if uuo.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := uuo.mutation.IsSuperuser(); ok {
		_spec.SetField(user.FieldIsSuperuser, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IsLocked(); ok {
		_spec.SetField(user.FieldIsLocked, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LockReason(); ok {
		_spec.SetField(user.FieldLockReason, field.TypeString, value)
	}
	if uuo.mutation.LockReasonCleared() {
		_spec.ClearField(user.FieldLockReason, field.TypeString)
	}
	if value, ok := uuo.mutation.Custattr(); ok {
		_spec.SetField(user.FieldCustattr, field.TypeJSON, value)
	}
	if uuo.mutation.CustattrCleared() {
		_spec.ClearField(user.FieldCustattr, field.TypeJSON)
	}
	if uuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
