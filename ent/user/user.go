// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldGivenName holds the string denoting the given_name field in the database.
	FieldGivenName = "given_name"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldEmailVerified holds the string denoting the email_verified field in the database.
	FieldEmailVerified = "email_verified"
	// FieldPasswordBcrypt holds the string denoting the password_bcrypt field in the database.
	FieldPasswordBcrypt = "password_bcrypt"
	// FieldTotpSecret holds the string denoting the totp_secret field in the database.
	FieldTotpSecret = "totp_secret"
	// FieldTotpEnabled holds the string denoting the totp_enabled field in the database.
	FieldTotpEnabled = "totp_enabled"
	// FieldLastLoginAt holds the string denoting the last_login_at field in the database.
	FieldLastLoginAt = "last_login_at"
	// FieldLastLogoutAt holds the string denoting the last_logout_at field in the database.
	FieldLastLogoutAt = "last_logout_at"
	// FieldLastLoginIP holds the string denoting the last_login_ip field in the database.
	FieldLastLoginIP = "last_login_ip"
	// FieldIsSuperuser holds the string denoting the is_superuser field in the database.
	FieldIsSuperuser = "is_superuser"
	// FieldIsLocked holds the string denoting the is_locked field in the database.
	FieldIsLocked = "is_locked"
	// FieldLockReason holds the string denoting the lock_reason field in the database.
	FieldLockReason = "lock_reason"
	// FieldCustattr holds the string denoting the custattr field in the database.
	FieldCustattr = "custattr"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// Table holds the table name of the user in the database.
	Table = "users"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "users"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEnabled,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTenantID,
	FieldUsername,
	FieldGivenName,
	FieldAvatar,
	FieldEmail,
	FieldEmailVerified,
	FieldPasswordBcrypt,
	FieldTotpSecret,
	FieldTotpEnabled,
	FieldLastLoginAt,
	FieldLastLogoutAt,
	FieldLastLoginIP,
	FieldIsSuperuser,
	FieldIsLocked,
	FieldLockReason,
	FieldCustattr,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// GivenNameValidator is a validator for the "given_name" field. It is called by the builders before save.
	GivenNameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultEmailVerified holds the default value on creation for the "email_verified" field.
	DefaultEmailVerified bool
	// PasswordBcryptValidator is a validator for the "password_bcrypt" field. It is called by the builders before save.
	PasswordBcryptValidator func(string) error
	// TotpSecretValidator is a validator for the "totp_secret" field. It is called by the builders before save.
	TotpSecretValidator func(string) error
	// DefaultTotpEnabled holds the default value on creation for the "totp_enabled" field.
	DefaultTotpEnabled bool
	// LastLoginIPValidator is a validator for the "last_login_ip" field. It is called by the builders before save.
	LastLoginIPValidator func(string) error
	// DefaultIsSuperuser holds the default value on creation for the "is_superuser" field.
	DefaultIsSuperuser bool
	// DefaultIsLocked holds the default value on creation for the "is_locked" field.
	DefaultIsLocked bool
	// LockReasonValidator is a validator for the "lock_reason" field. It is called by the builders before save.
	LockReasonValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByGivenName orders the results by the given_name field.
func ByGivenName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGivenName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByEmailVerified orders the results by the email_verified field.
func ByEmailVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailVerified, opts...).ToFunc()
}

// ByPasswordBcrypt orders the results by the password_bcrypt field.
func ByPasswordBcrypt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordBcrypt, opts...).ToFunc()
}

// ByTotpSecret orders the results by the totp_secret field.
func ByTotpSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotpSecret, opts...).ToFunc()
}

// ByTotpEnabled orders the results by the totp_enabled field.
func ByTotpEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotpEnabled, opts...).ToFunc()
}

// ByLastLoginAt orders the results by the last_login_at field.
func ByLastLoginAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginAt, opts...).ToFunc()
}

// ByLastLogoutAt orders the results by the last_logout_at field.
func ByLastLogoutAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLogoutAt, opts...).ToFunc()
}

// ByLastLoginIP orders the results by the last_login_ip field.
func ByLastLoginIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginIP, opts...).ToFunc()
}

// ByIsSuperuser orders the results by the is_superuser field.
func ByIsSuperuser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSuperuser, opts...).ToFunc()
}

// ByIsLocked orders the results by the is_locked field.
func ByIsLocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLocked, opts...).ToFunc()
}

// ByLockReason orders the results by the lock_reason field.
func ByLockReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockReason, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
	)
}
