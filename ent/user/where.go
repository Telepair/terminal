// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/telepair/terminal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEnabled, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenantID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// GivenName applies equality check predicate on the "given_name" field. It's identical to GivenNameEQ.
func GivenName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGivenName, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v []byte) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailVerified applies equality check predicate on the "email_verified" field. It's identical to EmailVerifiedEQ.
func EmailVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// PasswordBcrypt applies equality check predicate on the "password_bcrypt" field. It's identical to PasswordBcryptEQ.
func PasswordBcrypt(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordBcrypt, v))
}

// TotpSecret applies equality check predicate on the "totp_secret" field. It's identical to TotpSecretEQ.
func TotpSecret(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTotpSecret, v))
}

// TotpEnabled applies equality check predicate on the "totp_enabled" field. It's identical to TotpEnabledEQ.
func TotpEnabled(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTotpEnabled, v))
}

// LastLoginAt applies equality check predicate on the "last_login_at" field. It's identical to LastLoginAtEQ.
func LastLoginAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLogoutAt applies equality check predicate on the "last_logout_at" field. It's identical to LastLogoutAtEQ.
func LastLogoutAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLogoutAt, v))
}

// LastLoginIP applies equality check predicate on the "last_login_ip" field. It's identical to LastLoginIPEQ.
func LastLoginIP(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginIP, v))
}

// IsSuperuser applies equality check predicate on the "is_superuser" field. It's identical to IsSuperuserEQ.
func IsSuperuser(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsSuperuser, v))
}

// IsLocked applies equality check predicate on the "is_locked" field. It's identical to IsLockedEQ.
func IsLocked(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsLocked, v))
}

// LockReason applies equality check predicate on the "lock_reason" field. It's identical to LockReasonEQ.
func LockReason(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockReason, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEnabled, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTenantID, vs...))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// GivenNameEQ applies the EQ predicate on the "given_name" field.
func GivenNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGivenName, v))
}

// GivenNameNEQ applies the NEQ predicate on the "given_name" field.
func GivenNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGivenName, v))
}

// GivenNameIn applies the In predicate on the "given_name" field.
func GivenNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldGivenName, vs...))
}

// GivenNameNotIn applies the NotIn predicate on the "given_name" field.
func GivenNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGivenName, vs...))
}

// GivenNameGT applies the GT predicate on the "given_name" field.
func GivenNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldGivenName, v))
}

// GivenNameGTE applies the GTE predicate on the "given_name" field.
func GivenNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGivenName, v))
}

// GivenNameLT applies the LT predicate on the "given_name" field.
func GivenNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldGivenName, v))
}

// GivenNameLTE applies the LTE predicate on the "given_name" field.
func GivenNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGivenName, v))
}

// GivenNameContains applies the Contains predicate on the "given_name" field.
func GivenNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldGivenName, v))
}

// GivenNameHasPrefix applies the HasPrefix predicate on the "given_name" field.
func GivenNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldGivenName, v))
}

// GivenNameHasSuffix applies the HasSuffix predicate on the "given_name" field.
func GivenNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldGivenName, v))
}

// GivenNameIsNil applies the IsNil predicate on the "given_name" field.
func GivenNameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGivenName))
}

// GivenNameNotNil applies the NotNil predicate on the "given_name" field.
func GivenNameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGivenName))
}

// GivenNameEqualFold applies the EqualFold predicate on the "given_name" field.
func GivenNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldGivenName, v))
}

// GivenNameContainsFold applies the ContainsFold predicate on the "given_name" field.
func GivenNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldGivenName, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v []byte) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v []byte) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...[]byte) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...[]byte) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v []byte) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v []byte) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v []byte) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v []byte) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatar, v))
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAvatar))
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAvatar))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// EmailVerifiedEQ applies the EQ predicate on the "email_verified" field.
func EmailVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// EmailVerifiedNEQ applies the NEQ predicate on the "email_verified" field.
func EmailVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmailVerified, v))
}

// PasswordBcryptEQ applies the EQ predicate on the "password_bcrypt" field.
func PasswordBcryptEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordBcrypt, v))
}

// PasswordBcryptNEQ applies the NEQ predicate on the "password_bcrypt" field.
func PasswordBcryptNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordBcrypt, v))
}

// PasswordBcryptIn applies the In predicate on the "password_bcrypt" field.
func PasswordBcryptIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswordBcrypt, vs...))
}

// PasswordBcryptNotIn applies the NotIn predicate on the "password_bcrypt" field.
func PasswordBcryptNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswordBcrypt, vs...))
}

// PasswordBcryptGT applies the GT predicate on the "password_bcrypt" field.
func PasswordBcryptGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswordBcrypt, v))
}

// PasswordBcryptGTE applies the GTE predicate on the "password_bcrypt" field.
func PasswordBcryptGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswordBcrypt, v))
}

// PasswordBcryptLT applies the LT predicate on the "password_bcrypt" field.
func PasswordBcryptLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswordBcrypt, v))
}

// PasswordBcryptLTE applies the LTE predicate on the "password_bcrypt" field.
func PasswordBcryptLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswordBcrypt, v))
}

// PasswordBcryptContains applies the Contains predicate on the "password_bcrypt" field.
func PasswordBcryptContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswordBcrypt, v))
}

// PasswordBcryptHasPrefix applies the HasPrefix predicate on the "password_bcrypt" field.
func PasswordBcryptHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswordBcrypt, v))
}

// PasswordBcryptHasSuffix applies the HasSuffix predicate on the "password_bcrypt" field.
func PasswordBcryptHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswordBcrypt, v))
}

// PasswordBcryptEqualFold applies the EqualFold predicate on the "password_bcrypt" field.
func PasswordBcryptEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswordBcrypt, v))
}

// PasswordBcryptContainsFold applies the ContainsFold predicate on the "password_bcrypt" field.
func PasswordBcryptContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswordBcrypt, v))
}

// TotpSecretEQ applies the EQ predicate on the "totp_secret" field.
func TotpSecretEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTotpSecret, v))
}

// TotpSecretNEQ applies the NEQ predicate on the "totp_secret" field.
func TotpSecretNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTotpSecret, v))
}

// TotpSecretIn applies the In predicate on the "totp_secret" field.
func TotpSecretIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTotpSecret, vs...))
}

// TotpSecretNotIn applies the NotIn predicate on the "totp_secret" field.
func TotpSecretNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTotpSecret, vs...))
}

// TotpSecretGT applies the GT predicate on the "totp_secret" field.
func TotpSecretGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTotpSecret, v))
}

// TotpSecretGTE applies the GTE predicate on the "totp_secret" field.
func TotpSecretGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTotpSecret, v))
}

// TotpSecretLT applies the LT predicate on the "totp_secret" field.
func TotpSecretLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTotpSecret, v))
}

// TotpSecretLTE applies the LTE predicate on the "totp_secret" field.
func TotpSecretLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTotpSecret, v))
}

// TotpSecretContains applies the Contains predicate on the "totp_secret" field.
func TotpSecretContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTotpSecret, v))
}

// TotpSecretHasPrefix applies the HasPrefix predicate on the "totp_secret" field.
func TotpSecretHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTotpSecret, v))
}

// TotpSecretHasSuffix applies the HasSuffix predicate on the "totp_secret" field.
func TotpSecretHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTotpSecret, v))
}

// TotpSecretIsNil applies the IsNil predicate on the "totp_secret" field.
func TotpSecretIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTotpSecret))
}

// TotpSecretNotNil applies the NotNil predicate on the "totp_secret" field.
func TotpSecretNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTotpSecret))
}

// TotpSecretEqualFold applies the EqualFold predicate on the "totp_secret" field.
func TotpSecretEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTotpSecret, v))
}

// TotpSecretContainsFold applies the ContainsFold predicate on the "totp_secret" field.
func TotpSecretContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTotpSecret, v))
}

// TotpEnabledEQ applies the EQ predicate on the "totp_enabled" field.
func TotpEnabledEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTotpEnabled, v))
}

// TotpEnabledNEQ applies the NEQ predicate on the "totp_enabled" field.
func TotpEnabledNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTotpEnabled, v))
}

// LastLoginAtEQ applies the EQ predicate on the "last_login_at" field.
func LastLoginAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginAtNEQ applies the NEQ predicate on the "last_login_at" field.
func LastLoginAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginAt, v))
}

// LastLoginAtIn applies the In predicate on the "last_login_at" field.
func LastLoginAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginAt, vs...))
}

// LastLoginAtNotIn applies the NotIn predicate on the "last_login_at" field.
func LastLoginAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginAt, vs...))
}

// LastLoginAtGT applies the GT predicate on the "last_login_at" field.
func LastLoginAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginAt, v))
}

// LastLoginAtGTE applies the GTE predicate on the "last_login_at" field.
func LastLoginAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginAt, v))
}

// LastLoginAtLT applies the LT predicate on the "last_login_at" field.
func LastLoginAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginAt, v))
}

// LastLoginAtLTE applies the LTE predicate on the "last_login_at" field.
func LastLoginAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginAt, v))
}

// LastLoginAtIsNil applies the IsNil predicate on the "last_login_at" field.
func LastLoginAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastLoginAt))
}

// LastLoginAtNotNil applies the NotNil predicate on the "last_login_at" field.
func LastLoginAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastLoginAt))
}

// LastLogoutAtEQ applies the EQ predicate on the "last_logout_at" field.
func LastLogoutAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLogoutAt, v))
}

// LastLogoutAtNEQ applies the NEQ predicate on the "last_logout_at" field.
func LastLogoutAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLogoutAt, v))
}

// LastLogoutAtIn applies the In predicate on the "last_logout_at" field.
func LastLogoutAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLogoutAt, vs...))
}

// LastLogoutAtNotIn applies the NotIn predicate on the "last_logout_at" field.
func LastLogoutAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLogoutAt, vs...))
}

// LastLogoutAtGT applies the GT predicate on the "last_logout_at" field.
func LastLogoutAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLogoutAt, v))
}

// LastLogoutAtGTE applies the GTE predicate on the "last_logout_at" field.
func LastLogoutAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLogoutAt, v))
}

// LastLogoutAtLT applies the LT predicate on the "last_logout_at" field.
func LastLogoutAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLogoutAt, v))
}

// LastLogoutAtLTE applies the LTE predicate on the "last_logout_at" field.
func LastLogoutAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLogoutAt, v))
}

// LastLogoutAtIsNil applies the IsNil predicate on the "last_logout_at" field.
func LastLogoutAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastLogoutAt))
}

// LastLogoutAtNotNil applies the NotNil predicate on the "last_logout_at" field.
func LastLogoutAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastLogoutAt))
}

// LastLoginIPEQ applies the EQ predicate on the "last_login_ip" field.
func LastLoginIPEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastLoginIP, v))
}

// LastLoginIPNEQ applies the NEQ predicate on the "last_login_ip" field.
func LastLoginIPNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastLoginIP, v))
}

// LastLoginIPIn applies the In predicate on the "last_login_ip" field.
func LastLoginIPIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastLoginIP, vs...))
}

// LastLoginIPNotIn applies the NotIn predicate on the "last_login_ip" field.
func LastLoginIPNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastLoginIP, vs...))
}

// LastLoginIPGT applies the GT predicate on the "last_login_ip" field.
func LastLoginIPGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastLoginIP, v))
}

// LastLoginIPGTE applies the GTE predicate on the "last_login_ip" field.
func LastLoginIPGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastLoginIP, v))
}

// LastLoginIPLT applies the LT predicate on the "last_login_ip" field.
func LastLoginIPLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastLoginIP, v))
}

// LastLoginIPLTE applies the LTE predicate on the "last_login_ip" field.
func LastLoginIPLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastLoginIP, v))
}

// LastLoginIPContains applies the Contains predicate on the "last_login_ip" field.
func LastLoginIPContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastLoginIP, v))
}

// LastLoginIPHasPrefix applies the HasPrefix predicate on the "last_login_ip" field.
func LastLoginIPHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastLoginIP, v))
}

// LastLoginIPHasSuffix applies the HasSuffix predicate on the "last_login_ip" field.
func LastLoginIPHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastLoginIP, v))
}

// LastLoginIPIsNil applies the IsNil predicate on the "last_login_ip" field.
func LastLoginIPIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLastLoginIP))
}

// LastLoginIPNotNil applies the NotNil predicate on the "last_login_ip" field.
func LastLoginIPNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLastLoginIP))
}

// LastLoginIPEqualFold applies the EqualFold predicate on the "last_login_ip" field.
func LastLoginIPEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastLoginIP, v))
}

// LastLoginIPContainsFold applies the ContainsFold predicate on the "last_login_ip" field.
func LastLoginIPContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastLoginIP, v))
}

// IsSuperuserEQ applies the EQ predicate on the "is_superuser" field.
func IsSuperuserEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsSuperuser, v))
}

// IsSuperuserNEQ applies the NEQ predicate on the "is_superuser" field.
func IsSuperuserNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsSuperuser, v))
}

// IsLockedEQ applies the EQ predicate on the "is_locked" field.
func IsLockedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsLocked, v))
}

// IsLockedNEQ applies the NEQ predicate on the "is_locked" field.
func IsLockedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsLocked, v))
}

// LockReasonEQ applies the EQ predicate on the "lock_reason" field.
func LockReasonEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLockReason, v))
}

// LockReasonNEQ applies the NEQ predicate on the "lock_reason" field.
func LockReasonNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLockReason, v))
}

// LockReasonIn applies the In predicate on the "lock_reason" field.
func LockReasonIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLockReason, vs...))
}

// LockReasonNotIn applies the NotIn predicate on the "lock_reason" field.
func LockReasonNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLockReason, vs...))
}

// LockReasonGT applies the GT predicate on the "lock_reason" field.
func LockReasonGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLockReason, v))
}

// LockReasonGTE applies the GTE predicate on the "lock_reason" field.
func LockReasonGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLockReason, v))
}

// LockReasonLT applies the LT predicate on the "lock_reason" field.
func LockReasonLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLockReason, v))
}

// LockReasonLTE applies the LTE predicate on the "lock_reason" field.
func LockReasonLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLockReason, v))
}

// LockReasonContains applies the Contains predicate on the "lock_reason" field.
func LockReasonContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLockReason, v))
}

// LockReasonHasPrefix applies the HasPrefix predicate on the "lock_reason" field.
func LockReasonHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLockReason, v))
}

// LockReasonHasSuffix applies the HasSuffix predicate on the "lock_reason" field.
func LockReasonHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLockReason, v))
}

// LockReasonIsNil applies the IsNil predicate on the "lock_reason" field.
func LockReasonIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLockReason))
}

// LockReasonNotNil applies the NotNil predicate on the "lock_reason" field.
func LockReasonNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLockReason))
}

// LockReasonEqualFold applies the EqualFold predicate on the "lock_reason" field.
func LockReasonEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLockReason, v))
}

// LockReasonContainsFold applies the ContainsFold predicate on the "lock_reason" field.
func LockReasonContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLockReason, v))
}

// CustattrIsNil applies the IsNil predicate on the "custattr" field.
func CustattrIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCustattr))
}

// CustattrNotNil applies the NotNil predicate on the "custattr" field.
func CustattrNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCustattr))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
